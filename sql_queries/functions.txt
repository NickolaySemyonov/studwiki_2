CREATE OR REPLACE FUNCTION register_user(
    in_email VARCHAR(50),
    in_pwhash TEXT,
    in_nickname VARCHAR(50),
    OUT out_id INT,
	OUT out_role VARCHAR(10),
    OUT out_error_message TEXT
) AS $$
BEGIN
    INSERT INTO wiki_user (user_email, user_pwhash, user_nickname)
    VALUES (in_email, in_pwhash, in_nickname)
    RETURNING user_id INTO out_id;

	out_role:='user';
EXCEPTION
    WHEN not_null_violation THEN
        out_error_message := 'Все поля обязательны';
    WHEN check_violation THEN
        out_error_message := 'Некорректные данные';
    WHEN unique_violation THEN
        out_error_message := 'Email уже занят';
    WHEN OTHERS THEN
        out_error_message := 'Ошибка: ' || SQLERRM;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION find_user_by_email(
    in_email VARCHAR(50),
    OUT out_id INTEGER,
	OUT out_role VARCHAR(10),
    OUT out_email VARCHAR(50),
    OUT out_nickname VARCHAR(50),
    OUT out_pwhash TEXT,
    OUT out_error_message TEXT
) AS $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM wiki_user WHERE user_email = in_email) THEN
        out_error_message := 'Пользователь не найден';
        RETURN;
    END IF;
    
    SELECT user_id, user_role, user_email, user_nickname, user_pwhash 
    INTO out_id, out_role, out_email, out_nickname, out_pwhash
    FROM wiki_user 
    WHERE user_email = in_email;
    
    out_error_message := NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_user(
	in_id INT,
	OUT out_id INTEGER,
	OUT out_role VARCHAR(10),
    OUT out_email VARCHAR(50),
    OUT out_nickname VARCHAR(50),
    OUT out_error_message TEXT
) AS $$
BEGIN
	IF NOT EXISTS (SELECT 1 FROM wiki_user WHERE user_id = in_id) THEN
        out_error_message := 'Пользователь не найден';
        RETURN;
    END IF;

	SELECT user_id, user_role, user_email, user_nickname
    INTO out_id, out_role, out_email, out_nickname
    FROM wiki_user 
    WHERE user_id = in_id;

	out_error_message := NULL;
END;
$$ LANGUAGE plpgsql; 

DROP FUNCTION create_article;
CREATE OR REPLACE FUNCTION create_article(
	in_author_id INTEGER,
	in_section_id INTEGER,
	in_article_name VARCHAR(100),
	in_quill_delta TEXT,
	OUT out_article_id INTEGER,
	OUT out_version_id INTEGER,
	OUT out_hidden BOOLEAN,
	OUT out_commenting BOOLEAN,
	OUT out_version_active BOOLEAN,
	OUT out_error_message TEXT
) AS $$
BEGIN
	INSERT INTO wiki_article (section_id, user_id) 
	VALUES (in_section_id, in_author_id)
	RETURNING article_id, article_hidden, article_commenting 
	INTO out_article_id, out_hidden, out_commenting;

	INSERT INTO article_version (user_id, article_id, version_name, version_markdown, version_active) 
	VALUES (in_author_id, out_article_id, in_article_name,in_quill_delta, TRUE)
	RETURNING version_id, version_active INTO out_version_id, out_version_active;

EXCEPTION
	WHEN unique_violation THEN
		out_error_message := 'Статья с таким названием уже существует';	
	WHEN foreign_key_violation THEN
		out_error_message := 'Неверный section_id или author_id';
	WHEN OTHERS THEN
		out_error_message := 'Ошибка при создании статьи: ' || SQLERRM;
	
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_article_metadata_list(
	in_section_id INTEGER
)
RETURNS TABLE(
	article_id INTEGER,
	article_hidden BOOLEAN,
	section_id INTEGER,
	author_id INTEGER,
	author_nickname VARCHAR(50),
	article_name VARCHAR(120),
	last_updated TEXT
) AS $$
BEGIN
	RETURN QUERY 
	SELECT * FROM article_metadata_view
	WHERE article_metadata_view.section_id = in_section_id;
	
	 EXCEPTION WHEN OTHERS THEN
        RAISE EXCEPTION 'Error retrieving article_metadata list: %', SQLERRM;	
END; 
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_section_list()
RETURNS TABLE (
    section_id INTEGER,
    section_name VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        s.section_id,
        s.section_name
    FROM 
        wiki_section s
    ORDER BY 
        s.section_name;
    
    EXCEPTION WHEN OTHERS THEN
        RAISE EXCEPTION 'Error retrieving section list: %', SQLERRM;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION get_current_article(
	in_article_id INTEGER,
	OUT out_section_id INTEGER,
    OUT out_article_id INTEGER,
    OUT out_article_hidden BOOLEAN,
    OUT out_article_commenting BOOLEAN,
    OUT out_author_id INTEGER,
    OUT out_author_nickname VARCHAR(50),
 	OUT out_last_editor_id INTEGER,
    OUT out_last_editor_nickname VARCHAR(50),
    OUT out_article_name VARCHAR(120),
    OUT out_article_markdown TEXT,
    OUT out_last_updated TEXT,
	OUT out_err_message TEXT
) AS $$
BEGIN
	out_err_message:=NULL;
	
	SELECT 
		section_id, 
		article_id, 
		article_hidden, 
		article_commenting, 
		author_id, 
		author_nickname,
		last_editor_id,
	    last_editor_nickname,
	    article_name,
	    article_markdown,
	    last_updated
	INTO 
		out_section_id,
	    out_article_id,
	    out_article_hidden,
	    out_article_commenting,
	    out_author_id,
	    out_author_nickname,
	 	out_last_editor_id,
	    out_last_editor_nickname,
	    out_article_name,
	    out_article_markdown,
	    out_last_updated
	FROM article_displayed_view
	WHERE article_id=in_article_id;

EXCEPTION 
	WHEN OTHERS THEN
		out_err_message := 'Ошибка при получении статьи: ' || SQLERRM;
	
END;
$$ LANGUAGE plpgsql;